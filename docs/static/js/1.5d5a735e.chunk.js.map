{"version":3,"sources":["../node_modules/file-saver/src/FileSaver.js"],"names":["global","_global","Function","eval","e","window","self","this","download","url","name","opts","xhr","XMLHttpRequest","open","responseType","onload","saveAs","response","onerror","console","error","send","corsEnabled","status","click","node","dispatchEvent","MouseEvent","evt","document","createEvent","initMouseEvent","HTMLAnchorElement","prototype","blob","URL","webkitURL","a","createElement","rel","href","origin","location","target","createObjectURL","setTimeout","revokeObjectURL","navigator","clikc","msSaveOrOpenBlob","autoBom","warn","test","type","Blob","String","fromCharCode","bom","popup","title","body","innerText","force","isSafari","HTMLElement","safari","isChromeIOS","userAgent","FileReader","reader","onloadend","result","replace","readAsDataURL","module","exports"],"mappings":"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","file":"static/js/1.5d5a735e.chunk.js","sourcesContent":["/*\n* FileSaver.js\n* A saveAs() FileSaver implementation.\n*\n* By Eli Grey, http://eligrey.com\n*\n* License : https://github.com/eligrey/FileSaver.js/blob/master/LICENSE.md (MIT)\n* source  : http://purl.eligrey.com/github/FileSaver.js\n*/\n// The one and only way of getting global scope in all enviorment\n// https://stackoverflow.com/q/3277182/1008999\nvar _global = function () {\n  // some use content security policy to disable eval\n  try {\n    return Function('return this')() || (42, eval)('this');\n  } catch (e) {\n    // every global should have circular reference\n    // used for checking if someone writes var window = {}; var self = {}\n    return typeof window === 'object' && window.window === window ? window : typeof self === 'object' && self.self === self ? self : typeof global === 'object' && global.global === global ? global : this;\n  }\n}();\n\nfunction bom(blob, opts) {\n  if (typeof opts === 'undefined') opts = {\n    autoBom: false\n  };else if (typeof opts !== 'object') {\n    console.warn('Depricated: Expected third argument to be a object');\n    opts = {\n      autoBom: !opts\n    };\n  } // prepend BOM for UTF-8 XML and text/* types (including HTML)\n  // note: your browser will automatically convert UTF-16 U+FEFF to EF BB BF\n\n  if (opts.autoBom && /^\\s*(?:text\\/\\S*|application\\/xml|\\S*\\/\\S*\\+xml)\\s*;.*charset\\s*=\\s*utf-8/i.test(blob.type)) {\n    return new Blob([String.fromCharCode(0xFEFF), blob], {\n      type: blob.type\n    });\n  }\n\n  return blob;\n}\n\nfunction download(url, name, opts) {\n  var xhr = new XMLHttpRequest();\n  xhr.open('GET', url);\n  xhr.responseType = 'blob';\n\n  xhr.onload = function () {\n    saveAs(xhr.response, name, opts);\n  };\n\n  xhr.onerror = function () {\n    console.error('could not download file');\n  };\n\n  xhr.send();\n}\n\nfunction corsEnabled(url) {\n  var xhr = new XMLHttpRequest(); // use sync to avoid popup blocker\n\n  xhr.open('HEAD', url, false);\n  xhr.send();\n  return xhr.status >= 200 && xhr.status <= 299;\n} // `a.click()` don't work for all browsers (#465)\n\n\nfunction click(node) {\n  try {\n    node.dispatchEvent(new MouseEvent('click'));\n  } catch (e) {\n    var evt = document.createEvent('MouseEvents');\n    evt.initMouseEvent('click', true, true, window, 0, 0, 0, 80, 20, false, false, false, false, 0, null);\n    node.dispatchEvent(evt);\n  }\n}\n\nvar saveAs = _global.saveAs || // probably in some web worker\ntypeof window !== 'object' || window !== _global ? function saveAs() {}\n/* noop */\n// Use download attribute first if possible (#193 Lumia mobile)\n: 'download' in HTMLAnchorElement.prototype ? function saveAs(blob, name, opts) {\n  var URL = _global.URL || _global.webkitURL;\n  var a = document.createElement('a');\n  name = name || blob.name || 'download';\n  a.download = name;\n  a.rel = 'noopener'; // tabnabbing\n  // TODO: detect chrome extensions & packaged apps\n  // a.target = '_blank'\n\n  if (typeof blob === 'string') {\n    // Support regular links\n    a.href = blob;\n\n    if (a.origin !== location.origin) {\n      corsEnabled(a.href) ? download(blob, name, opts) : click(a, a.target = '_blank');\n    } else {\n      click(a);\n    }\n  } else {\n    // Support blobs\n    a.href = URL.createObjectURL(blob);\n    setTimeout(function () {\n      URL.revokeObjectURL(a.href);\n    }, 4E4); // 40s\n\n    setTimeout(function () {\n      click(a);\n    }, 0);\n  }\n} // Use msSaveOrOpenBlob as a second approch\n: 'msSaveOrOpenBlob' in navigator ? function saveAs(blob, name, opts) {\n  name = name || blob.name || 'download';\n\n  if (typeof blob === 'string') {\n    if (corsEnabled(blob)) {\n      download(blob, name, opts);\n    } else {\n      var a = document.createElement('a');\n      a.href = blob;\n      a.target = '_blank';\n      setTimeout(function () {\n        clikc(a);\n      });\n    }\n  } else {\n    navigator.msSaveOrOpenBlob(bom(blob, opts), name);\n  }\n} // Fallback to using FileReader and a popup\n: function saveAs(blob, name, opts, popup) {\n  // Open a popup immediately do go around popup blocker\n  // Mostly only avalible on user interaction and the fileReader is async so...\n  popup = popup || open('', '_blank');\n\n  if (popup) {\n    popup.document.title = popup.document.body.innerText = 'downloading...';\n  }\n\n  if (typeof blob === 'string') return download(blob, name, opts);\n  var force = blob.type === 'application/octet-stream';\n\n  var isSafari = /constructor/i.test(_global.HTMLElement) || _global.safari;\n\n  var isChromeIOS = /CriOS\\/[\\d]+/.test(navigator.userAgent);\n\n  if ((isChromeIOS || force && isSafari) && typeof FileReader === 'object') {\n    // Safari doesn't allow downloading of blob urls\n    var reader = new FileReader();\n\n    reader.onloadend = function () {\n      var url = reader.result;\n      url = isChromeIOS ? url : url.replace(/^data:[^;]*;/, 'data:attachment/file;');\n      if (popup) popup.location.href = url;else location = url;\n      popup = null; // reverse-tabnabbing #460\n    };\n\n    reader.readAsDataURL(blob);\n  } else {\n    var URL = _global.URL || _global.webkitURL;\n    var url = URL.createObjectURL(blob);\n    if (popup) popup.location = url;else location.href = url;\n    popup = null; // reverse-tabnabbing #460\n\n    setTimeout(function () {\n      URL.revokeObjectURL(url);\n    }, 4E4); // 40s\n  }\n};\nmodule.exports = _global.saveAs = saveAs.saveAs = saveAs;"],"sourceRoot":""}