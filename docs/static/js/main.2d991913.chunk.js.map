{"version":3,"sources":["assets/images/luxun_1.jpg","theme/index.ts","stores/helpers.ts","stores/Builder.ts","stores/index.ts","layouts/Default.tsx","components/ImagePreview.tsx","components/ImageCard.tsx","components/DictumEdit.tsx","screens/Home.tsx","screens/Root.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","__webpack_require__","p","styledComponents","styled","default","theme","css","createGlobalStyle","keyframes","ThemeProvider","createMuiTheme","palette","primary","teal","secondary","deepOrange","typography","useNextVariants","fontFamily","join","ThemeContext","React","DEFAULT_DICTIONARY","randomDictum","Math","floor","random","length","Builder","types","model","dictum","author","imageSrc","defaultImageSrc","imageLoading","externalImageSrc","externalImageFetching","multiline","textColor","views","self","authorVisible","actions","controller","window","AbortController","signal","changeDictum","drawDictum","changeAuthor","changeImage","src","changeExternalImage","changeTextColor","color","toggleLoading","loading","toggleMultiline","reset","pickExternalImage","flow","regenerator_default","a","mark","response","_ref","regular","wrap","_context","prev","next","abort","fetch","concat","process","sent","json","urls","t0","console","error","finish","stop","this","rootStore","builder","optional","create","StoreContext","addMiddleware","actionLogger","Container","div","_templateObject","TitleLink","Link","_templateObject2","SubTitle","Typography","_templateObject3","Content","section","_templateObject4","Root","children","react_default","createElement","AppBar_default","position","Toolbar_default","Typography_default","variant","to","Button_default","ImagePreview","observer","_temp","_class2","_Component","_getPrototypeOf2","_this","Object","classCallCheck","_len","arguments","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","authorTextRef","createRef","dictumTextRef","stageRef","setStageRef","el","props","innerRef","shouldAdjustText","state","image","stageWidth","stageHeight","componentDidMount","autorun","_createImage","context","reaction","componentDidUpdate","prevProps","prevState","_adjustText","handleImageReload","handleResize","width","setState","handleSnackbarClose","_computeScale","containerWidth","containerHeight","widthScale","min","heightScale","height","_computeSize","scale","inherits","createClass","key","value","_this2","Image","onload","onerror","authorText","current","dictumText","authorTextY","getStage","getHeight","y","_this$context$builder","_this$state","_this$_computeSize","style","ReactKonva","ref","react","preventDefault","x","fill","text","fontSize","align","verticalAlign","draggable","padding","Snackbar_default","anchorOrigin","vertical","horizontal","open","autoHideDuration","onClose","ContentProps","aria-describedby","message","id","action","size","onClick","react_resize_detector_lib_default","handleWidth","onResize","refreshMode","Component","contextType","_class","CenteredCardContent","CardContent","ImageCard_templateObject","rightIconStyle","marginLeft","ImageCard","ImageCard_temp","_class3","initializerDefineProperty","_descriptor","assertThisInitialized","canvasRef","handleFileUpload","target","file","files","fileReader","FileReader","addEventListener","result","readAsDataURL","handleFileDownload","asyncToGenerator","_callee","_ref3","saveAs","stage","canvas","e","then","t","bind","toCanvas","toBlob","blob","handleFileCopy","handleExternalImageSrcChange","_ref4","handleExternalImageLoad","handleExternalImagePick","Card_default","CardHeader_default","title","ImagePreview_ImagePreview","CardActions_default","onChange","accept","display","type","htmlFor","component","CloudUpload_default","Save_default","Tooltip_default","disableTouchListener","FileCopy_default","CardContent_default","gutterBottom","TextField_default","label","placeholder","helperText","fullWidth","disabled","margin","InputProps","endAdornment","InputAdornment_default","IconButton_default","Send_default","ImageCard_class2","applyDecoratedDescriptor","prototype","observable","configurable","enumerable","writable","initializer","ImageCard_class","DictumEdit","DictumEdit_temp","DictumEdit_class2","handleMultilineToggle","checked","handleDictumChange","_ref2","handleAuthorToggle","handleAuthorChange","handleColorChange","_ref5","hex","Switch_default","Cached_default","react_color_lib","triangle","colors","onChangeComplete","FormControlLabel_default","control","Collapse_default","in","SettingsBackupRestore_default","DictumEdit_class","Home_templateObject","Alert","SnackbarContent","Home_templateObject2","light","Home","Home_temp","Home_class3","Home_descriptor","handleAlertClose","isAlertVisible","Home_Container","aria-label","Close_default","ImageCard_ImageCard","DictumEdit_DictumEdit","Home_class2","Home_class","BrowserRouter","basename","Switch","Default","Route","exact","path","generateClassName","createGenerateClassName","jss","objectSpread","jssPreset","insertionPoint","document","getElementById","App","Provider","styles","react_jss_lib","Root_Root","CssBaseline_default","Boolean","location","hostname","match","ReactDOM","render","App_App","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,kSCYpCC,EALOC,IAATC,QAOWC,KANXC,MACAC,oBACAC,YACAC,cAGmBC,yBAAe,CAClCC,QAAS,CACPC,QAASC,IACTC,UAAWC,KAEbC,WAAY,CACVC,iBAAiB,EAEjBC,WAAY,CACV,gBACA,qBACA,aACA,SACA,mBACA,QACA,aACA,sBACA,mBACA,qBACAC,KAAK,SAIEC,EAAeC,gBAAoBhB,GAEjCF,uDCvCTmB,EAAqB,CACzB,yDACA,qEACA,6CACA,gBACA,sEAGWC,EAAe,kBAC1BD,EAAmBE,KAAKC,MAAMD,KAAKE,SAAWJ,EAAmBK,UCJtDC,EAAUC,IACpBC,MAAM,CACLC,OAAQR,IACRS,OAAQ,eACRC,SAAUC,IACVC,cAAc,EACdC,iBAAkB,GAClBC,uBAAuB,EACvBC,WAAW,EACXC,UAAW,SAEZC,MAAM,SAAAC,GAAI,MAAK,CACdC,oBACE,QAASD,EAAKT,WAGjBW,QAAQ,SAAAF,GACP,IAAIG,EAAa,IAAIC,OAAOC,gBACtBC,EAAWH,EAAXG,OAEN,MAAO,CACLC,aADK,SACQjB,GACXU,EAAKV,OAASA,GAGhBkB,WALK,WAMHR,EAAKV,OAASR,KAGhB2B,aATK,SASQlB,GACXS,EAAKT,OAASA,GAGhBmB,YAbK,SAaOC,GACVX,EAAKR,SAAWmB,GAGlBC,oBAjBK,SAiBeD,GAClBX,EAAKL,iBAAmBgB,GAG1BE,gBArBK,SAqBWC,GACdd,EAAKF,UAAYgB,GAGnBC,cAzBK,SAyBSC,GACZhB,EAAKN,aAAesB,GAGtBC,gBA7BK,SA6BWpB,GACdG,EAAKH,UAAYA,GAGnBqB,MAjCK,WAkCHlB,EAAKR,SAAWC,IAChBO,EAAKV,OAASR,IACdkB,EAAKT,OAAS,eACdS,EAAKF,UAAY,QAGnBqB,kBAAmBC,YAAIC,EAAAC,EAAAC,KAAC,SAAUJ,IAAV,IAAAK,EAAAC,EAAAC,EAAA,OAAAL,EAAAC,EAAAK,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAUH,OATf9B,EAAKJ,uBACPO,EAAW4B,QACX5B,EAAa,IAAIC,OAAOC,gBACxBC,EAASH,EAAWG,QAEpBN,EAAKJ,uBAAwB,EANTgC,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAUGE,MAAK,qDAAAC,OAExBC,oEAEF,CACE5B,WAfgB,OAoBhB,OAVEkB,EAVcI,EAAAO,KAAAP,EAAAE,KAAA,EAoBVN,EAASY,OApBC,OAAAX,EAAAG,EAAAO,KAmBVT,EAnBUD,EAmBlBY,KAAQX,QAEV1B,EAAKL,iBAAmB+B,EACxB1B,EAAKR,SAAWkC,EAtBIE,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAU,GAAAV,EAAA,SAyBpBW,QAAQC,MAARZ,EAAAU,IAzBoB,eAAAV,EAAAC,KAAA,GA2BpB7B,EAAKJ,uBAAwB,EA3BTgC,EAAAa,OAAA,6BAAAb,EAAAc,SAAUvB,EAAVwB,KAAA,sBCvDjBC,EAJYxD,IAAMC,MAAM,CACnCwD,QAASzD,IAAM0D,SAAS3D,EAAS,MAGA4D,SAEtBC,EAAepE,gBAAoBgE,GAIhDK,YAAcL,EAAWM,klBCPzB,4BAAMC,GAAYzF,EAAO0F,IAAVC,MAMTC,GAAY5F,EAAO6F,IAAP7F,CAAH8F,MAKTC,GAAW/F,EAAOgG,IAAPhG,CAAHiG,KAKRC,GAAUlG,EAAOmG,QAAVC,KAsBEC,GAjBS,SAAAtC,GAAkB,IAAfuC,EAAevC,EAAfuC,SACzB,OACEC,EAAA3C,EAAA4C,cAACf,GAAD,KACEc,EAAA3C,EAAA4C,cAACC,EAAA7C,EAAD,CAAQ8C,SAAS,UACfH,EAAA3C,EAAA4C,cAACG,EAAA/C,EAAD,KACE2C,EAAA3C,EAAA4C,cAACI,EAAAhD,EAAD,CAAYiD,QAAQ,KAAKzD,MAAM,WAC7BmD,EAAA3C,EAAA4C,cAACZ,GAAD,CAAWkB,GAAG,KAAd,SAEFP,EAAA3C,EAAA4C,cAACT,GAAD,CAAU3C,MAAM,WAAhB,4BACAmD,EAAA3C,EAAA4C,cAACO,EAAAnD,EAAD,CAAQR,MAAM,WAAd,aAGJmD,EAAA3C,EAAA4C,cAACN,GAAD,KAAUI,qZCpBHU,GADZC,cACDC,GAAAC,GAAA,SAAAC,GAAA,SAAAJ,IAAA,IAAAK,EAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAtC,KAAA+B,GAAA,QAAAS,EAAAC,UAAAlG,OAAAmG,EAAA,IAAAC,MAAAH,GAAAI,EAAA,EAAAA,EAAAJ,EAAAI,IAAAF,EAAAE,GAAAH,UAAAG,GAAA,OAAAP,EAAAC,OAAAO,EAAA,EAAAP,CAAAtC,MAAAoC,EAAAE,OAAAQ,EAAA,EAAAR,CAAAP,IAAAgB,KAAAC,MAAAZ,EAAA,CAAApC,MAAAV,OAAAoD,MAIEO,cAAgBhH,IAAMiH,YAJxBb,EAKEc,cAAgBlH,IAAMiH,YALxBb,EAOEe,SAAoC,KAPtCf,EAQEgB,YAAc,SAACC,GACbjB,EAAKe,SAAWE,EAChBjB,EAAKkB,MAAMC,SAASF,IAVxBjB,EAaEoB,kBAA4B,EAb9BpB,EAeEqB,MAA2B,CACzBC,MAAO,KACP9D,MAAO,KACP+D,WAAY,IACZC,YAAa,KAnBjBxB,EAsBEyB,kBAAoB,WAClBC,aAAQ,WACN1B,EAAK2B,aAAa3B,EAAK4B,QAAQ/D,QAAQrD,YAGzCqH,aACE,iBAAO,CACLvH,OAAQ0F,EAAK4B,QAAQ/D,QAAQvD,OAC7BC,OAAQyF,EAAK4B,QAAQ/D,QAAQtD,OAC7BO,UAAWkF,EAAK4B,QAAQ/D,QAAQ/C,UAChCyG,WAAYvB,EAAKqB,MAAME,aAEzB,WACEvB,EAAKoB,kBAAmB,KAnChCpB,EAwCE8B,mBAAqB,SAACC,EAA8BC,IAC9ChC,EAAKqB,MAAMC,QAAUU,EAAUV,OAAStB,EAAKoB,oBAC/CpB,EAAKiC,cACLjC,EAAKoB,kBAAmB,IA3C9BpB,EA+CEkC,kBAAoB,WAClBlC,EAAK2B,aAAa3B,EAAK4B,QAAQ/D,QAAQrD,WAhD3CwF,EAmDEmC,aAAe,SAACC,GACdpC,EAAKqC,SAAS,CAAEd,WAAYa,KApDhCpC,EAuDEsC,oBAAsB,WACpBtC,EAAKqC,SAAS,CAAE7E,MAAO,QAxD3BwC,EAmGEuC,cAAgB,SACdC,EACAC,EACAnB,GAEA,IAAKA,EACH,OAAO,EAGT,IAAMoB,EAAa3I,KAAK4I,IAAIH,EAAgBlB,EAAMc,OAASd,EAAMc,MAC3DQ,EAAc7I,KAAK4I,IAAIF,EAAiBnB,EAAMuB,QAAUvB,EAAMuB,OACpE,OAAO9I,KAAK4I,IAAID,EAAYE,EAAa,IA9G7C5C,EAiHE8C,aAAe,SACbxB,EACAyB,EACAP,EACAC,GAEA,OAAKnB,EAOE,CACLc,MAAOd,EAAMc,MAAQW,EACrBF,OAAQvB,EAAMuB,OAASE,GARhB,CACLX,MAAOI,EACPK,OAAQJ,IA1HhBzC,EAAA,OAAAC,OAAA+C,EAAA,EAAA/C,CAAAP,EAAAI,GAAAG,OAAAgD,EAAA,EAAAhD,CAAAP,EAAA,EAAAwD,IAAA,eAAAC,MAAA,SA2DexH,GAAa,IAAAyH,EAAAzF,KACxB,GAAKhC,EAAL,CADwB,IAKhBkC,EAAYF,KAAKiE,QAAjB/D,QACRA,EAAQ9B,eAAc,GAEtB,IAAMuF,EAAQ,IAAIlG,OAAOiI,MACzB/B,EAAM3F,IAAMA,EACZ2F,EAAMgC,OAAS,WACbzF,EAAQ9B,eAAc,GAEtBqH,EAAKf,SAAS,CACZf,WAGJA,EAAMiC,QAAU,SAAC/F,GACfK,EAAQ9B,eAAc,GACtB8B,EAAQnC,YAAY,IAEpB0H,EAAKf,SAAS,CAAE7E,cAhFtB,CAAA0F,IAAA,cAAAC,MAAA,WAqFI,IAAMpC,EAAWpD,KAAKoD,SAChByC,EAAa7F,KAAKiD,cAAc6C,QAChCC,EAAa/F,KAAKmD,cAAc2C,QAEtC,GAAK1C,GAAayC,GAAeE,EAAjC,CAIA,IACMC,EADQ5C,EAAS6C,WACGC,YAAcL,EAAWK,YACnDL,EAAWM,EAAEH,GACbD,EAAWI,EAAEH,EAAcD,EAAWG,gBAhG1C,CAAAX,IAAA,SAAAC,MAAA,WAoIW,IAAAY,EAGHpG,KAAKiE,QADP/D,QAAWvD,EAFNyJ,EAEMzJ,OAAQC,EAFdwJ,EAEcxJ,OAAQO,EAFtBiJ,EAEsBjJ,UAFtBkJ,EAI2CrG,KAAK0D,MAA/CC,EAJD0C,EAIC1C,MAAO9D,EAJRwG,EAIQxG,MAAO+D,EAJfyC,EAIezC,WAAYC,EAJ3BwC,EAI2BxC,YAG5BuB,EAAQpF,KAAK4E,cAAchB,EAAYC,EAAaF,GAPnD2C,EAQmBtG,KAAKmF,aAAaxB,EAAOyB,EAAOxB,EAAYC,GAA9DY,EARD6B,EAQC7B,MAAOS,EARRoB,EAQQpB,OAEf,OACE5D,EAAA3C,EAAA4C,cAAA,OAAKgF,MAAO,CAAE9B,MAAO,SACnBnD,EAAA3C,EAAA4C,cAACiF,GAAA,MAAD,CAAkBC,IAAKzG,KAAKqD,YAAaoB,MAAOA,EAAOS,OAAQA,GAC7D5D,EAAA3C,EAAA4C,cAACiF,GAAA,MAAD,KACG7C,GACCrC,EAAA3C,EAAA4C,cAACmF,EAAA,SAAD,KACEpF,EAAA3C,EAAA4C,cAACiF,GAAA,MAAD,CACE7C,MAAOA,EACPgD,gBAAgB,EAChBvB,MAAO,CAAEwB,EAAGxB,EAAOe,EAAGf,KAExB9D,EAAA3C,EAAA4C,cAACiF,GAAA,KAAD,CACEC,IAAKzG,KAAKmD,cACVsB,MAAOA,EACPmC,EAAG,EACHT,EAAGjB,EACH2B,KAAM1J,EACN2J,KAAMnK,EACNoK,SAAU,GAAK3B,EACf4B,MAAM,SACNC,cAAc,SACdN,gBAAgB,EAChBO,WAAS,IAEX5F,EAAA3C,EAAA4C,cAACiF,GAAA,KAAD,CACEC,IAAKzG,KAAKiD,cACVwB,MAAOA,EACPmC,EAAG,EACHT,EAAGjB,EACH2B,KAAM1J,EACN2J,KAAMlK,GAAM,eAAA0C,OAAS1C,GACrBuK,QAAS,GACTJ,SAAU,GAAK3B,EACf4B,MAAM,QACNC,cAAc,SACdN,gBAAgB,EAChBO,WAAS,OAOnB5F,EAAA3C,EAAA4C,cAAC6F,GAAAzI,EAAD,CACE0I,aAAc,CACZC,SAAU,SACVC,WAAY,UAEdC,OAAQ3H,EACR4H,iBAAkB,IAClBC,QAAS1H,KAAK2E,oBACdgD,aAAc,CACZC,mBAAoB,cAEtBC,QAASvG,EAAA3C,EAAA4C,cAAA,QAAMuG,GAAG,cAAT,iDACTC,OAAQ,CACNzG,EAAA3C,EAAA4C,cAACO,EAAAnD,EAAD,CAAQ4G,IAAI,SAASpH,MAAM,YAAY6J,KAAK,QAAQC,QAASjI,KAAKuE,mBAAlE,YAMJjD,EAAA3C,EAAA4C,cAAC2G,GAAAvJ,EAAD,CAAqBwJ,aAAW,EAACC,SAAUpI,KAAKwE,aAAc6D,YAAY,kBA5MlFtG,EAAA,CAAkCuG,aAAlCpG,GACSqG,YAAclI,EADvBmI,GAAAvG,MAAAuG,iJCGA,4BAAMC,GAAsB1N,kBAAO2N,KAAP3N,CAAH4N,MAMnBC,GAAiB,CACrBC,WAAY,GAIDC,GADZ9G,cACD+G,GAAAC,GAAA,SAAA7G,GAAA,SAAA2G,IAAA,IAAA1G,EAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAtC,KAAA8I,GAAA,QAAAtG,EAAAC,UAAAlG,OAAAmG,EAAA,IAAAC,MAAAH,GAAAI,EAAA,EAAAA,EAAAJ,EAAAI,IAAAF,EAAAE,GAAAH,UAAAG,GAAA,OAAAP,EAAAC,OAAAO,EAAA,EAAAP,CAAAtC,MAAAoC,EAAAE,OAAAQ,EAAA,EAAAR,CAAAwG,IAAA/F,KAAAC,MAAAZ,EAAA,CAAApC,MAAAV,OAAAoD,KAAAJ,OAAA2G,GAAA,EAAA3G,CAAAD,EAAA,QAAA6G,GAAA5G,OAAA6G,GAAA,EAAA7G,QAAA6G,GAAA,EAAA7G,CAAAD,OAME+G,UAAqC,KANvC/G,EAQEgH,iBAAmB,SAAAvK,GAAqD,IAAlDwK,EAAkDxK,EAAlDwK,OACdC,EAAOD,EAAOE,OAASF,EAAOE,MAAM,GAC1C,GAAID,EAAM,CACR,IAAME,EAAa,IAAIC,WACvBD,EAAWE,iBAAiB,OAAQ,WAClCtH,EAAK4B,QAAQ/D,QAAQnC,YAAY0L,EAAWG,UAE9CH,EAAWI,cAAcN,KAf/BlH,EAmBEyH,mBAnBFxH,OAAAyH,GAAA,EAAAzH,CAAA5D,EAAAC,EAAAC,KAmBuB,SAAAoL,IAAA,IAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAA1L,EAAAC,EAAAK,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACMvE,EAAAyP,EAAA,GAAAC,KAAA1P,EAAA2P,EAAAC,KAAA,aADN,OAGnB,GAHmBP,EAAAhL,EAAAO,KACX0K,EADWD,EACXC,OACFC,EAAQ9H,EAAK+G,UACR,CACHgB,EAASD,EAAMlE,WAAWwE,SAAS,IACzC,IACEL,EAAOM,OAAO,SAAAC,GACRA,GACFT,EAAOS,EAAM,sBAGjB,MAAO9K,GACPwC,EAAKxC,MAAQA,GAZE,wBAAAZ,EAAAc,SAAAiK,EAAAhK,SAnBvBqC,EAoCEuI,eAAiB,aApCnBvI,EAsCEwI,6BAA+B,SAAAC,GAAqD,IAAlDxB,EAAkDwB,EAAlDxB,OAChCjH,EAAK4B,QAAQ/D,QAAQjC,oBAAoBqL,EAAO9D,QAvCpDnD,EA0CE0I,wBAA0B,WAAM,IACtB7K,EAAYmC,EAAK4B,QAAjB/D,QACRA,EAAQnC,YAAYmC,EAAQlD,mBA5ChCqF,EA+CEsC,oBAAsB,WACpBtC,EAAKxC,MAAQ,MAhDjBwC,EAmDE2I,wBAA0B,WACxB3I,EAAK4B,QAAQ/D,QAAQ1B,qBApDzB6D,EAAA,OAAAC,OAAA+C,EAAA,EAAA/C,CAAAwG,EAAA3G,GAAAG,OAAAgD,EAAA,EAAAhD,CAAAwG,EAAA,EAAAvD,IAAA,SAAAC,MAAA,WAuDW,IAAAC,EAAAzF,KAAAoG,EAGHpG,KAAKiE,QADP/D,QAAWlD,EAFNoJ,EAEMpJ,iBAAkBC,EAFxBmJ,EAEwBnJ,sBAG/B,OACEqE,EAAA3C,EAAA4C,cAACmF,EAAA,SAAD,KACEpF,EAAA3C,EAAA4C,cAAC0J,GAAAtM,EAAD,KACE2C,EAAA3C,EAAA4C,cAAC2J,GAAAvM,EAAD,CAAYwM,MAAM,6BAClB7J,EAAA3C,EAAA4C,cAACkH,GAAD,KACEnH,EAAA3C,EAAA4C,cAAC6J,GAAD,CAAc5H,SAAU,SAACF,GAAD,OAA2BmC,EAAK2D,UAAY9F,MAEtEhC,EAAA3C,EAAA4C,cAAC8J,GAAA1M,EAAD,KACE2C,EAAA3C,EAAA4C,cAAA,SACE+J,SAAUtL,KAAKqJ,iBACfkC,OAAO,UACPhF,MAAO,CAAEiF,QAAS,QAClB1D,GAAG,eACH2D,KAAK,SAEPnK,EAAA3C,EAAA4C,cAAA,SAAOmK,QAAQ,gBACbpK,EAAA3C,EAAA4C,cAACO,EAAAnD,EAAD,CAAQgN,UAAU,OAAOxN,MAAM,WAA/B,SAEEmD,EAAA3C,EAAA4C,cAACqK,GAAAjN,EAAD,CAAiB4H,MAAOqC,OAG5BtH,EAAA3C,EAAA4C,cAACO,EAAAnD,EAAD,CAAQR,MAAM,YAAY8J,QAASjI,KAAK8J,oBAAxC,OAEExI,EAAA3C,EAAA4C,cAACsK,GAAAlN,EAAD,CAAU4H,MAAOqC,MAEnBtH,EAAA3C,EAAA4C,cAACmF,EAAA,SAAD,KACEpF,EAAA3C,EAAA4C,cAACuK,GAAAnN,EAAD,CAASoN,sBAAoB,EAACZ,MAAM,sBAClC7J,EAAA3C,EAAA4C,cAACO,EAAAnD,EAAD,CAAQR,MAAM,UAAU8J,QAASjI,KAAK4K,gBAAtC,OAEEtJ,EAAA3C,EAAA4C,cAACyK,GAAArN,EAAD,CAAc4H,MAAOqC,SAK7BtH,EAAA3C,EAAA4C,cAAC0K,GAAAtN,EAAD,KACE2C,EAAA3C,EAAA4C,cAAA,UACED,EAAA3C,EAAA4C,cAAA,UACED,EAAA3C,EAAA4C,cAACI,EAAAhD,EAAD,CAAYR,MAAM,gBAAgB+N,cAAY,GAA9C,8BAIF5K,EAAA3C,EAAA4C,cAAA,UACED,EAAA3C,EAAA4C,cAACI,EAAAhD,EAAD,CAAYR,MAAM,gBAAgB+N,cAAY,GAA9C,qFAIF5K,EAAA3C,EAAA4C,cAAA,UACED,EAAA3C,EAAA4C,cAACI,EAAAhD,EAAD,CAAYR,MAAM,iBAAlB,6HAQNmD,EAAA3C,EAAA4C,cAAC0K,GAAAtN,EAAD,KACE2C,EAAA3C,EAAA4C,cAAC4K,GAAAxN,EAAD,CACEyN,MAAM,kBACN5G,MAAOxI,EACPqP,YAAY,4BACZC,WAAU,gDACVC,WAAS,EACTC,SAAUvP,EACVwP,OAAO,SACPnB,SAAUtL,KAAK6K,6BACf6B,WAAY,CACVC,aACErL,EAAA3C,EAAA4C,cAACqL,GAAAjO,EAAD,CAAgB8C,SAAS,OACvBH,EAAA3C,EAAA4C,cAACuK,GAAAnN,EAAD,CAASoN,sBAAoB,EAACZ,MAAM,SAClC7J,EAAA3C,EAAA4C,cAAA,WACED,EAAA3C,EAAA4C,cAACsL,GAAAlO,EAAD,CACE6N,UAAWxP,EACXiL,QAASjI,KAAK+K,yBAEdzJ,EAAA3C,EAAA4C,cAACuL,GAAAnO,EAAD,cAShB2C,EAAA3C,EAAA4C,cAAC8J,GAAA1M,EAAD,KACE2C,EAAA3C,EAAA4C,cAACO,EAAAnD,EAAD,CAAQsJ,QAASjI,KAAKgL,yBAAtB,uBAIJ1J,EAAA3C,EAAA4C,cAAC6F,GAAAzI,EAAD,CACE0I,aAAc,CACZC,SAAU,SACVC,WAAY,UAEdC,OAAQxH,KAAKH,MACb4H,iBAAkB,IAClBC,QAAS1H,KAAK2E,oBACdgD,aAAc,CACZC,mBAAoB,cAEtBC,QACEvG,EAAA3C,EAAA4C,cAAA,QAAMuG,GAAG,cAAT,oGAKFC,OAAQ,CACNzG,EAAA3C,EAAA4C,cAACO,EAAAnD,EAAD,CAAQ4G,IAAI,QAAQpH,MAAM,YAAY6J,KAAK,QAAQC,QAASjI,KAAK2E,qBAAjE,iBAtKZmE,EAAA,CAA+BR,aAA/BU,GACST,YAAclI,EADvB0M,GAAAhE,GAAAG,GAAA5G,OAAA0K,GAAA,EAAA1K,CAAAyK,GAAAE,UAAA,SAIGC,MAJH,CAAAC,cAAA,EAAAC,YAAA,EAAAC,UAAA,EAAAC,YAAA,kBAIsB,QAJtBC,GAAAR,MAAAQ,sHCbM3E,GAAiB,CACrBC,WAAY,GAID2E,GADZxL,cACDyL,GAAAC,GAAA,SAAAvL,GAAA,SAAAqL,IAAA,IAAApL,EAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAtC,KAAAwN,GAAA,QAAAhL,EAAAC,UAAAlG,OAAAmG,EAAA,IAAAC,MAAAH,GAAAI,EAAA,EAAAA,EAAAJ,EAAAI,IAAAF,EAAAE,GAAAH,UAAAG,GAAA,OAAAP,EAAAC,OAAAO,EAAA,EAAAP,CAAAtC,MAAAoC,EAAAE,OAAAQ,EAAA,EAAAR,CAAAkL,IAAAzK,KAAAC,MAAAZ,EAAA,CAAApC,MAAAV,OAAAoD,MAIEiL,sBAAwB,SAAA7O,GAAqD,IAAlDwK,EAAkDxK,EAAlDwK,OACzBjH,EAAK4B,QAAQ/D,QAAQ5B,gBAAgBgL,EAAOsE,UALhDvL,EAQEwL,mBAAqB,SAAAC,GAAqD,IAAlDxE,EAAkDwE,EAAlDxE,OACtBjH,EAAK4B,QAAQ/D,QAAQtC,aAAa0L,EAAO9D,QAT7CnD,EAYE0L,mBAAqB,SAAA9D,GAAqD,IAAlDX,EAAkDW,EAAlDX,OACtBjH,EAAK4B,QAAQ/D,QAAQpC,aAAawL,EAAOsE,QAAU,eAAO,KAb9DvL,EAgBE2L,mBAAqB,SAAAlD,GAAqD,IAAlDxB,EAAkDwB,EAAlDxB,OACtBjH,EAAK4B,QAAQ/D,QAAQpC,aAAawL,EAAO9D,QAjB7CnD,EAoBE4L,kBAAoB,SAAAC,GAA0B,IAAvBC,EAAuBD,EAAvBC,IACrB9L,EAAK4B,QAAQ/D,QAAQhC,gBAAgBiQ,IArBzC9L,EAAA,OAAAC,OAAA+C,EAAA,EAAA/C,CAAAkL,EAAArL,GAAAG,OAAAgD,EAAA,EAAAhD,CAAAkL,EAAA,EAAAjI,IAAA,SAAAC,MAAA,WAwBW,IAAAY,EAGHpG,KAAKiE,QADP/D,QAAWvD,EAFNyJ,EAEMzJ,OAAQC,EAFdwJ,EAEcxJ,OAAQU,EAFtB8I,EAEsB9I,cAAeJ,EAFrCkJ,EAEqClJ,UAAWC,EAFhDiJ,EAEgDjJ,UAAWU,EAF3DuI,EAE2DvI,WAAYU,EAFvE6H,EAEuE7H,MAG9E,OACE+C,EAAA3C,EAAA4C,cAAC0J,GAAAtM,EAAD,KACE2C,EAAA3C,EAAA4C,cAAC2J,GAAAvM,EAAD,CAAYwM,MAAM,6BAClB7J,EAAA3C,EAAA4C,cAAC0K,GAAAtN,EAAD,KACE2C,EAAA3C,EAAA4C,cAAC4K,GAAAxN,EAAD,CACEyN,MAAM,2BACNlP,UAAWA,EACXsI,MAAO7I,EACP0P,YAAY,6CACZC,WAAYpP,EAAY,6CAAY,2EACpCqP,WAAS,EACTE,OAAO,SACPnB,SAAUtL,KAAK6N,mBACfnB,WAAY,CACVC,aACErL,EAAA3C,EAAA4C,cAACqL,GAAAjO,EAAD,CAAgB8C,SAAS,OACvBH,EAAA3C,EAAA4C,cAAC6M,GAAAzP,EAAD,CAAQiP,QAAS1Q,EAAWoO,SAAUtL,KAAK2N,6BAOrDrM,EAAA3C,EAAA4C,cAAC8J,GAAA1M,EAAD,KACE2C,EAAA3C,EAAA4C,cAACO,EAAAnD,EAAD,CAAQR,MAAM,UAAUyD,QAAQ,YAAYqG,QAASpK,GAArD,SAEEyD,EAAA3C,EAAA4C,cAAC8M,GAAA1P,EAAD,CAAY4H,MAAOqC,OAIvBtH,EAAA3C,EAAA4C,cAAC0K,GAAAtN,EAAD,KACE2C,EAAA3C,EAAA4C,cAACI,EAAAhD,EAAD,CAAYgN,UAAU,IAAIxN,MAAM,gBAAgB+N,cAAY,GAA5D,wCAGA5K,EAAA3C,EAAA4C,cAAC+M,GAAA,cAAD,CACEC,SAAS,OACT9J,MAAM,QACNtG,MAAOhB,EACPqR,OAAQ,CACN,OACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAEFC,iBAAkBzO,KAAKiO,qBAI3B3M,EAAA3C,EAAA4C,cAAC0K,GAAAtN,EAAD,KACE2C,EAAA3C,EAAA4C,cAACmN,GAAA/P,EAAD,CACEgQ,QACErN,EAAA3C,EAAA4C,cAAC6M,GAAAzP,EAAD,CAAQR,MAAM,UAAUyP,QAAStQ,EAAegO,SAAUtL,KAAK+N,qBAEjE3B,MAAM,6BAER9K,EAAA3C,EAAA4C,cAACqN,GAAAjQ,EAAD,CAAUkQ,GAAIvR,GACZgE,EAAA3C,EAAA4C,cAAC4K,GAAAxN,EAAD,CACEyN,MAAM,eACN5G,MAAO5I,EACPyP,YAAY,iCACZE,WAAS,EACTE,OAAO,SACPnB,SAAUtL,KAAKgO,uBAIrB1M,EAAA3C,EAAA4C,cAAC8J,GAAA1M,EAAD,KACE2C,EAAA3C,EAAA4C,cAACO,EAAAnD,EAAD,CAAQR,MAAM,YAAYyD,QAAQ,YAAYqG,QAAS1J,GAAvD,QAEE+C,EAAA3C,EAAA4C,cAACuN,GAAAnQ,EAAD,CAAa4H,MAAOqC,YAxGhC4E,EAAA,CAAgClF,aAAhCoF,GACSnF,YAAclI,EADvB0O,GAAAtB,MAAAsB,wjBChBA,IAAMvO,GAAYzF,EAAOmG,QAAV8N,MAeTC,GAAQlU,EAAOmU,KAAPnU,CAAHoU,KAIW,SAAA5L,GAAK,OAAIA,EAAMtI,MAAMM,QAAQsE,MAAMuP,QAQ5CC,GADZrN,cACDsN,GAAAC,GAAA,SAAApN,GAAA,SAAAkN,IAAA,IAAAjN,EAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAtC,KAAAqP,GAAA,QAAA7M,EAAAC,UAAAlG,OAAAmG,EAAA,IAAAC,MAAAH,GAAAI,EAAA,EAAAA,EAAAJ,EAAAI,IAAAF,EAAAE,GAAAH,UAAAG,GAAA,OAAAP,EAAAC,OAAAO,EAAA,EAAAP,CAAAtC,MAAAoC,EAAAE,OAAAQ,EAAA,EAAAR,CAAA+M,IAAAtM,KAAAC,MAAAZ,EAAA,CAAApC,MAAAV,OAAAoD,KAAAJ,OAAA2G,GAAA,EAAA3G,CAAAD,EAAA,iBAAAmN,GAAAlN,OAAA6G,GAAA,EAAA7G,QAAA6G,GAAA,EAAA7G,CAAAD,OAOEoN,iBAAmB,WACjBpN,EAAKqN,gBAAiB,GAR1BrN,EAAA,OAAAC,OAAA+C,EAAA,EAAA/C,CAAA+M,EAAAlN,GAAAG,OAAAgD,EAAA,EAAAhD,CAAA+M,EAAA,EAAA9J,IAAA,SAAAC,MAAA,WAYI,OACElE,EAAA3C,EAAA4C,cAACoO,GAAD,KACG3P,KAAK0P,gBACJpO,EAAA3C,EAAA4C,cAAC0N,GAAD,CACEpH,QAAQ,oFACR5M,MAAO+E,KAAKiE,QACZ8D,OAAQ,CACNzG,EAAA3C,EAAA4C,cAACsL,GAAAlO,EAAD,CACE4G,IAAI,QACJqK,aAAW,QACXzR,MAAM,UACN8J,QAASjI,KAAKyP,kBAEdnO,EAAA3C,EAAA4C,cAACsO,GAAAlR,EAAD,UAKR2C,EAAA3C,EAAA4C,cAACuO,GAAD,MACAxO,EAAA3C,EAAA4C,cAACwO,GAAD,WA/BRV,EAAA,CAA0B/G,aAA1BiH,GACShH,YAAcvM,EADvBgU,GAAAV,GAAAE,GAAAlN,OAAA0K,GAAA,EAAA1K,CAAA0N,GAAA/C,UAAA,kBAIGC,MAJH,CAAAC,cAAA,EAAAC,YAAA,EAAAC,UAAA,EAAAC,YAAA,kBAKmB,KALnB2C,GAAAD,MAAAC,GCjCa7O,GAAb,SAAAe,GAAA,SAAAf,IAAA,OAAAkB,OAAAC,EAAA,EAAAD,CAAAtC,KAAAoB,GAAAkB,OAAAO,EAAA,EAAAP,CAAAtC,KAAAsC,OAAAQ,EAAA,EAAAR,CAAAlB,GAAA4B,MAAAhD,KAAAyC,YAAA,OAAAH,OAAA+C,EAAA,EAAA/C,CAAAlB,EAAAe,GAAAG,OAAAgD,EAAA,EAAAhD,CAAAlB,EAAA,EAAAmE,IAAA,SAAAC,MAAA,WAEI,OACElE,EAAA3C,EAAA4C,cAAC2O,EAAA,EAAD,CAAQC,SAAU5Q,aAChB+B,EAAA3C,EAAA4C,cAAC6O,EAAA,EAAD,KACE9O,EAAA3C,EAAA4C,cAAC8O,GAAD,KACE/O,EAAA3C,EAAA4C,cAAC6O,EAAA,EAAD,KACE9O,EAAA3C,EAAA4C,cAAC+O,EAAA,EAAD,CAAOC,OAAK,EAAC5E,UAAW0D,GAAMmB,KAAK,cAPjDpP,EAAA,CAA0BkH,aCOpBmI,GAAoBC,oCACpBC,GAAMvQ,iBAAOkC,OAAAsO,EAAA,EAAAtO,CAAA,GACduO,sBADa,CAGhBC,eAAgBC,SAASC,eAAe,0BAG7BC,GAAb,SAAA9O,GAAA,SAAA8O,IAAA,OAAA3O,OAAAC,EAAA,EAAAD,CAAAtC,KAAAiR,GAAA3O,OAAAO,EAAA,EAAAP,CAAAtC,KAAAsC,OAAAQ,EAAA,EAAAR,CAAA2O,GAAAjO,MAAAhD,KAAAyC,YAAA,OAAAH,OAAA+C,EAAA,EAAA/C,CAAA2O,EAAA9O,GAAAG,OAAAgD,EAAA,EAAAhD,CAAA2O,EAAA,EAAA1L,IAAA,SAAAC,MAAA,WAEI,OACElE,EAAA3C,EAAA4C,cAAClB,EAAa6Q,SAAd,CAAuB1L,MAAOvF,GAC5BqB,EAAA3C,EAAA4C,cAACvF,EAAakV,SAAd,CAAuB1L,MAAOvK,GAC5BqG,EAAA3C,EAAA4C,cAAC4P,EAAA,iBAAD,CAAkBlW,MAAOA,GACvBqG,EAAA3C,EAAA4C,cAAC6P,EAAA,YAAD,CAAaT,IAAKA,GAAKF,kBAAmBA,IACxCnP,EAAA3C,EAAA4C,cAACmF,EAAA,SAAD,KACEpF,EAAA3C,EAAA4C,cAAC8P,GAAD,MACA/P,EAAA3C,EAAA4C,cAAC+P,EAAA3S,EAAD,eAThBsS,EAAA,CAAyB3I,aCRLiJ,QACW,cAA7B9T,OAAO+T,SAASC,UAEe,UAA7BhU,OAAO+T,SAASC,UAEhBhU,OAAO+T,SAASC,SAASC,MAAM,2DCXnCC,IAASC,OAAOtQ,EAAA3C,EAAA4C,cAACsQ,GAAD,MAASd,SAASC,eAAe,SD+H3C,kBAAmBc,WACrBA,UAAUC,cAAcC,MAAM1H,KAAK,SAAA2H,GACjCA,EAAaC","file":"static/js/main.2d991913.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/luxun_1.77bdf646.jpg\";","import * as React from 'react';\nimport * as styledComponents from 'styled-components';\nimport { createMuiTheme, Theme } from '@material-ui/core/styles';\nimport teal from '@material-ui/core/colors/teal';\nimport deepOrange from '@material-ui/core/colors/deepOrange';\n\nconst {\n  default: styled,\n  css,\n  createGlobalStyle,\n  keyframes,\n  ThemeProvider,\n} = styledComponents as styledComponents.ThemedStyledComponentsModule<Theme>;\n\nexport const theme = createMuiTheme({\n  palette: {\n    primary: teal,\n    secondary: deepOrange,\n  },\n  typography: {\n    useNextVariants: true,\n    // Use the system font instead of the default Roboto font.\n    fontFamily: [\n      '-apple-system',\n      'BlinkMacSystemFont',\n      '\"Segoe UI\"',\n      'Roboto',\n      '\"Helvetica Neue\"',\n      'Arial',\n      'sans-serif',\n      '\"Apple Color Emoji\"',\n      '\"Segoe UI Emoji\"',\n      '\"Segoe UI Symbol\"',\n    ].join(','),\n  },\n});\n\nexport const ThemeContext = React.createContext(theme);\n\nexport default styled;\nexport { css, createGlobalStyle, keyframes, ThemeProvider };\n","const DEFAULT_DICTIONARY = [\n  '晚睡的人，没有对象',\n  '表情包多的人，没有对象',\n  '我没说过这些话',\n  'no zuo no die',\n  '我就静静地看着你们装逼',\n];\n\nexport const randomDictum = () =>\n  DEFAULT_DICTIONARY[Math.floor(Math.random() * DEFAULT_DICTIONARY.length)];\n","import { types, flow } from 'mobx-state-tree';\n\nimport defaultImageSrc from '../assets/images/luxun_1.jpg';\nimport { randomDictum } from './helpers';\n\nexport const Builder = types\n  .model({\n    dictum: randomDictum(),\n    author: '鲁迅',\n    imageSrc: defaultImageSrc,\n    imageLoading: false,\n    externalImageSrc: '',\n    externalImageFetching: false,\n    multiline: false,\n    textColor: '#FFF',\n  })\n  .views(self => ({\n    get authorVisible() {\n      return !!self.author;\n    },\n  }))\n  .actions(self => {\n    let controller = new window.AbortController();\n    let { signal } = controller;\n\n    return {\n      changeDictum(dictum: string) {\n        self.dictum = dictum;\n      },\n\n      drawDictum() {\n        self.dictum = randomDictum();\n      },\n\n      changeAuthor(author: string) {\n        self.author = author;\n      },\n\n      changeImage(src: string) {\n        self.imageSrc = src;\n      },\n\n      changeExternalImage(src: string) {\n        self.externalImageSrc = src;\n      },\n\n      changeTextColor(color: string) {\n        self.textColor = color;\n      },\n\n      toggleLoading(loading: boolean) {\n        self.imageLoading = loading;\n      },\n\n      toggleMultiline(multiline: boolean) {\n        self.multiline = multiline;\n      },\n\n      reset() {\n        self.imageSrc = defaultImageSrc;\n        self.dictum = randomDictum();\n        self.author = '鲁迅';\n        self.textColor = '#FFF';\n      },\n\n      pickExternalImage: flow(function* pickExternalImage() {\n        if (self.externalImageFetching) {\n          controller.abort();\n          controller = new window.AbortController();\n          signal = controller.signal;\n        } else {\n          self.externalImageFetching = true;\n        }\n\n        try {\n          const response = yield fetch(\n            `https://api.unsplash.com/photos/random/?client_id=${\n              process.env.REACT_APP_UNSPLASH_ACCESS_KEY\n            }`,\n            {\n              signal,\n            }\n          );\n          const {\n            urls: { regular },\n          } = yield response.json();\n          self.externalImageSrc = regular;\n          self.imageSrc = regular;\n        } catch (error) {\n          // TODO haven't decided what to do yet\n          console.error(error);\n        } finally {\n          self.externalImageFetching = false;\n        }\n      }),\n    };\n  });\n\nexport type BuilderType = typeof Builder;\n","import * as React from 'react';\nimport { addMiddleware, types } from 'mobx-state-tree';\nimport { actionLogger } from 'mst-middlewares';\n\nimport { Builder } from './Builder';\n\nexport const RootStore = types.model({\n  builder: types.optional(Builder, {}),\n});\n\nexport const rootStore = RootStore.create();\n\nexport const StoreContext = React.createContext(rootStore);\n\nexport type RootStoreType = typeof rootStore;\n\naddMiddleware(rootStore, actionLogger);\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\n\nimport styled from '../theme';\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100vh;\n`;\n\nconst TitleLink = styled(Link)`\n  text-decoration: none;\n  color: inherit;\n`;\n\nconst SubTitle = styled(Typography)`\n  flex-grow: 1;\n  padding-left: 24px;\n`;\n\nconst Content = styled.section`\n  flex-grow: 1;\n  padding: 24px;\n`;\n\nconst Root: React.SFC = ({ children }) => {\n  return (\n    <Container>\n      <AppBar position=\"sticky\">\n        <Toolbar>\n          <Typography variant=\"h6\" color=\"inherit\">\n            <TitleLink to=\"/\">MEME</TitleLink>\n          </Typography>\n          <SubTitle color=\"inherit\">For modern browsers only</SubTitle>\n          <Button color=\"inherit\">Gallery</Button>\n        </Toolbar>\n      </AppBar>\n      <Content>{children}</Content>\n    </Container>\n  );\n};\n\nexport default Root;\n","import React, { Component, Fragment, Ref } from 'react';\nimport { autorun, reaction } from 'mobx';\nimport { observer } from 'mobx-react';\nimport * as ReactKonva from 'react-konva';\nimport * as Konva from 'konva';\nimport Button from '@material-ui/core/Button';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport ReactResizeDetector from 'react-resize-detector';\n\nimport { StoreContext, RootStoreType } from '../stores';\n\nexport interface ImagePreviewProps {\n  innerRef: (el: ReactKonva.Stage) => void;\n}\nexport interface ImagePreviewState {\n  image: HTMLImageElement | null;\n  error: Error | null;\n  stageWidth: number;\n  stageHeight: number;\n}\n\n@observer\nexport class ImagePreview extends Component<ImagePreviewProps, ImagePreviewState> {\n  static contextType = StoreContext;\n  context!: RootStoreType;\n\n  authorTextRef = React.createRef<Konva.Text>();\n  dictumTextRef = React.createRef<Konva.Text>();\n\n  stageRef: ReactKonva.Stage | null = null;\n  setStageRef = (el: ReactKonva.Stage) => {\n    this.stageRef = el;\n    this.props.innerRef(el);\n  };\n\n  shouldAdjustText: boolean = false;\n\n  state: ImagePreviewState = {\n    image: null,\n    error: null,\n    stageWidth: 600,\n    stageHeight: 600,\n  };\n\n  componentDidMount = () => {\n    autorun(() => {\n      this._createImage(this.context.builder.imageSrc);\n    });\n\n    reaction(\n      () => ({\n        dictum: this.context.builder.dictum,\n        author: this.context.builder.author,\n        textColor: this.context.builder.textColor,\n        stageWidth: this.state.stageWidth,\n      }),\n      () => {\n        this.shouldAdjustText = true;\n      }\n    );\n  };\n\n  componentDidUpdate = (prevProps: ImagePreviewProps, prevState: ImagePreviewState) => {\n    if (this.state.image !== prevState.image || this.shouldAdjustText) {\n      this._adjustText();\n      this.shouldAdjustText = false;\n    }\n  };\n\n  handleImageReload = () => {\n    this._createImage(this.context.builder.imageSrc);\n  };\n\n  handleResize = (width: number) => {\n    this.setState({ stageWidth: width });\n  };\n\n  handleSnackbarClose = () => {\n    this.setState({ error: null });\n  };\n\n  _createImage(src: string) {\n    if (!src) {\n      return;\n    }\n\n    const { builder } = this.context;\n    builder.toggleLoading(true);\n\n    const image = new window.Image();\n    image.src = src;\n    image.onload = () => {\n      builder.toggleLoading(false);\n\n      this.setState({\n        image,\n      });\n    };\n    image.onerror = (error: Error) => {\n      builder.toggleLoading(false);\n      builder.changeImage('');\n\n      this.setState({ error });\n    };\n  }\n\n  _adjustText() {\n    const stageRef = this.stageRef;\n    const authorText = this.authorTextRef.current;\n    const dictumText = this.dictumTextRef.current;\n\n    if (!stageRef || !authorText || !dictumText) {\n      return;\n    }\n\n    const stage = stageRef.getStage();\n    const authorTextY = stage.getHeight() - authorText.getHeight();\n    authorText.y(authorTextY);\n    dictumText.y(authorTextY - dictumText.getHeight());\n  }\n\n  _computeScale = (\n    containerWidth: number,\n    containerHeight: number,\n    image: HTMLImageElement | null\n  ) => {\n    if (!image) {\n      return 1;\n    }\n\n    const widthScale = Math.min(containerWidth, image.width) / image.width;\n    const heightScale = Math.min(containerHeight, image.height) / image.height;\n    return Math.min(widthScale, heightScale, 1);\n  };\n\n  _computeSize = (\n    image: HTMLImageElement | null,\n    scale: number,\n    containerWidth: number,\n    containerHeight: number\n  ) => {\n    if (!image) {\n      return {\n        width: containerWidth,\n        height: containerHeight,\n      };\n    }\n\n    return {\n      width: image.width * scale,\n      height: image.height * scale,\n    };\n  };\n\n  render() {\n    const {\n      builder: { dictum, author, textColor },\n    } = this.context;\n    const { image, error, stageWidth, stageHeight } = this.state;\n\n    // TODO meoization\n    const scale = this._computeScale(stageWidth, stageHeight, image);\n    const { width, height } = this._computeSize(image, scale, stageWidth, stageHeight);\n\n    return (\n      <div style={{ width: '100%' }}>\n        <ReactKonva.Stage ref={this.setStageRef} width={width} height={height}>\n          <ReactKonva.Layer>\n            {image && (\n              <Fragment>\n                <ReactKonva.Image\n                  image={image!}\n                  preventDefault={false}\n                  scale={{ x: scale, y: scale }}\n                />\n                <ReactKonva.Text\n                  ref={this.dictumTextRef}\n                  width={width}\n                  x={0}\n                  y={height}\n                  fill={textColor}\n                  text={dictum}\n                  fontSize={48 * scale}\n                  align=\"center\"\n                  verticalAlign=\"bottom\"\n                  preventDefault={false}\n                  draggable\n                />\n                <ReactKonva.Text\n                  ref={this.authorTextRef}\n                  width={width}\n                  x={0}\n                  y={height}\n                  fill={textColor}\n                  text={author && `——${author}`}\n                  padding={16}\n                  fontSize={36 * scale}\n                  align=\"right\"\n                  verticalAlign=\"bottom\"\n                  preventDefault={false}\n                  draggable\n                />\n              </Fragment>\n            )}\n          </ReactKonva.Layer>\n        </ReactKonva.Stage>\n\n        <Snackbar\n          anchorOrigin={{\n            vertical: 'bottom',\n            horizontal: 'center',\n          }}\n          open={!!error}\n          autoHideDuration={3000}\n          onClose={this.handleSnackbarClose}\n          ContentProps={{\n            'aria-describedby': 'message-id',\n          }}\n          message={<span id=\"message-id\">Failed to loading image, please check the URL</span>}\n          action={[\n            <Button key=\"reload\" color=\"secondary\" size=\"small\" onClick={this.handleImageReload}>\n              RETRY\n            </Button>,\n          ]}\n        />\n\n        <ReactResizeDetector handleWidth onResize={this.handleResize} refreshMode=\"throttle\" />\n      </div>\n    );\n  }\n}\n","import React, { Component, Fragment } from 'react';\nimport { observable } from 'mobx';\nimport { observer } from 'mobx-react';\nimport styled from 'styled-components';\nimport * as Konva from 'konva';\nimport * as ReactKonva from 'react-konva';\nimport Card from '@material-ui/core/Card';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardActions from '@material-ui/core/CardActions';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\nimport SaveIcon from '@material-ui/icons/Save';\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport TextField from '@material-ui/core/TextField';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport IconButton from '@material-ui/core/IconButton';\nimport SendIcon from '@material-ui/icons/Send';\nimport Snackbar from '@material-ui/core/Snackbar';\n\nimport { StoreContext, RootStoreType } from '../stores';\nimport { ImagePreview } from './ImagePreview';\n\nconst CenteredCardContent = styled(CardContent)`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nconst rightIconStyle = {\n  marginLeft: 8,\n};\n\n@observer\nexport class ImageCard extends Component {\n  static contextType = StoreContext;\n  context!: RootStoreType;\n\n  @observable error = null;\n\n  canvasRef: ReactKonva.Stage | null = null;\n\n  handleFileUpload = ({ target }: React.ChangeEvent<HTMLInputElement>) => {\n    const file = target.files && target.files[0];\n    if (file) {\n      const fileReader = new FileReader();\n      fileReader.addEventListener('load', () => {\n        this.context.builder.changeImage(fileReader.result as string);\n      });\n      fileReader.readAsDataURL(file);\n    }\n  };\n\n  handleFileDownload = async () => {\n    const { saveAs } = await import('file-saver');\n    const stage = this.canvasRef;\n    if (stage) {\n      const canvas = stage.getStage().toCanvas({} as Konva.ToCanvasConfig);\n      try {\n        canvas.toBlob(blob => {\n          if (blob) {\n            saveAs(blob, 'pretty image.png');\n          }\n        });\n      } catch (error) {\n        this.error = error;\n      }\n    }\n  };\n\n  handleFileCopy = () => {};\n\n  handleExternalImageSrcChange = ({ target }: React.ChangeEvent<HTMLInputElement>) => {\n    this.context.builder.changeExternalImage(target.value);\n  };\n\n  handleExternalImageLoad = () => {\n    const { builder } = this.context;\n    builder.changeImage(builder.externalImageSrc);\n  };\n\n  handleSnackbarClose = () => {\n    this.error = null;\n  };\n\n  handleExternalImagePick = () => {\n    this.context.builder.pickExternalImage();\n  };\n\n  render() {\n    const {\n      builder: { externalImageSrc, externalImageFetching },\n    } = this.context;\n\n    return (\n      <Fragment>\n        <Card>\n          <CardHeader title=\"图片预览\" />\n          <CenteredCardContent>\n            <ImagePreview innerRef={(el: ReactKonva.Stage) => (this.canvasRef = el)} />\n          </CenteredCardContent>\n          <CardActions>\n            <input\n              onChange={this.handleFileUpload}\n              accept=\"image/*\"\n              style={{ display: 'none' }}\n              id=\"upload-image\"\n              type=\"file\"\n            />\n            <label htmlFor=\"upload-image\">\n              <Button component=\"span\" color=\"primary\">\n                Upload\n                <CloudUploadIcon style={rightIconStyle} />\n              </Button>\n            </label>\n            <Button color=\"secondary\" onClick={this.handleFileDownload}>\n              Save\n              <SaveIcon style={rightIconStyle} />\n            </Button>\n            <Fragment>\n              <Tooltip disableTouchListener title=\"Not supported yet!\">\n                <Button color=\"default\" onClick={this.handleFileCopy}>\n                  Copy\n                  <FileCopyIcon style={rightIconStyle} />\n                </Button>\n              </Tooltip>\n            </Fragment>\n          </CardActions>\n          <CardContent>\n            <ul>\n              <li>\n                <Typography color=\"textSecondary\" gutterBottom>\n                  Text supports drag & drop\n                </Typography>\n              </li>\n              <li>\n                <Typography color=\"textSecondary\" gutterBottom>\n                  Image might overflow with insufficient space, click Save button to preview whole\n                </Typography>\n              </li>\n              <li>\n                <Typography color=\"textSecondary\">\n                  Failed to find a clipboard api to programmatically copy canvas/image, right click\n                  and select 'Copy image' works though\n                </Typography>\n              </li>\n            </ul>\n          </CardContent>\n\n          <CardContent>\n            <TextField\n              label=\"External source\"\n              value={externalImageSrc}\n              placeholder=\"Use external image source\"\n              helperText={`Enter an valid image source and click 'APPLY'`}\n              fullWidth\n              disabled={externalImageFetching}\n              margin=\"normal\"\n              onChange={this.handleExternalImageSrcChange}\n              InputProps={{\n                endAdornment: (\n                  <InputAdornment position=\"end\">\n                    <Tooltip disableTouchListener title=\"Apply\">\n                      <div>\n                        <IconButton\n                          disabled={!externalImageSrc}\n                          onClick={this.handleExternalImageLoad}\n                        >\n                          <SendIcon />\n                        </IconButton>\n                      </div>\n                    </Tooltip>\n                  </InputAdornment>\n                ),\n              }}\n            />\n          </CardContent>\n          <CardActions>\n            <Button onClick={this.handleExternalImagePick}>I'm Feeling Lucky</Button>\n          </CardActions>\n        </Card>\n\n        <Snackbar\n          anchorOrigin={{\n            vertical: 'bottom',\n            horizontal: 'center',\n          }}\n          open={!!this.error}\n          autoHideDuration={3000}\n          onClose={this.handleSnackbarClose}\n          ContentProps={{\n            'aria-describedby': 'message-id',\n          }}\n          message={\n            <span id=\"message-id\">\n              External image may not be downloaded this way. Right click and select 'Save image\n              as...' instead\n            </span>\n          }\n          action={[\n            <Button key=\"close\" color=\"secondary\" size=\"small\" onClick={this.handleSnackbarClose}>\n              CLOSE\n            </Button>,\n          ]}\n        />\n      </Fragment>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport { observer } from 'mobx-react';\nimport Card from '@material-ui/core/Card';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardActions from '@material-ui/core/CardActions';\nimport TextField from '@material-ui/core/TextField';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport Switch from '@material-ui/core/Switch';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Button from '@material-ui/core/Button';\nimport CachedIcon from '@material-ui/icons/Cached';\nimport RestoreIcon from '@material-ui/icons/SettingsBackupRestore';\nimport Collapse from '@material-ui/core/Collapse';\nimport Typography from '@material-ui/core/Typography';\nimport { TwitterPicker, ColorResult } from 'react-color';\n\nimport { StoreContext, RootStoreType } from '../stores';\n\nexport type DictumEditInjectProps = {\n  store: RootStoreType;\n};\n\nconst rightIconStyle = {\n  marginLeft: 8,\n};\n\n@observer\nexport class DictumEdit extends Component {\n  static contextType = StoreContext;\n  context!: RootStoreType;\n\n  handleMultilineToggle = ({ target }: React.ChangeEvent<HTMLInputElement>) => {\n    this.context.builder.toggleMultiline(target.checked);\n  };\n\n  handleDictumChange = ({ target }: React.ChangeEvent<HTMLInputElement>) => {\n    this.context.builder.changeDictum(target.value);\n  };\n\n  handleAuthorToggle = ({ target }: React.ChangeEvent<HTMLInputElement>) => {\n    this.context.builder.changeAuthor(target.checked ? '鲁迅' : '');\n  };\n\n  handleAuthorChange = ({ target }: React.ChangeEvent<HTMLInputElement>) => {\n    this.context.builder.changeAuthor(target.value);\n  };\n\n  handleColorChange = ({ hex }: ColorResult) => {\n    this.context.builder.changeTextColor(hex);\n  };\n\n  render() {\n    const {\n      builder: { dictum, author, authorVisible, multiline, textColor, drawDictum, reset },\n    } = this.context;\n\n    return (\n      <Card>\n        <CardHeader title=\"内容编辑\" />\n        <CardContent>\n          <TextField\n            label=\"文字内容\"\n            multiline={multiline}\n            value={dictum}\n            placeholder=\"请输入文字内容\"\n            helperText={multiline ? '回车进入下一行' : '使用右侧开关切换多行模式'}\n            fullWidth\n            margin=\"normal\"\n            onChange={this.handleDictumChange}\n            InputProps={{\n              endAdornment: (\n                <InputAdornment position=\"end\">\n                  <Switch checked={multiline} onChange={this.handleMultilineToggle} />\n                </InputAdornment>\n              ),\n            }}\n          />\n        </CardContent>\n\n        <CardActions>\n          <Button color=\"default\" variant=\"contained\" onClick={drawDictum}>\n            RANDOM\n            <CachedIcon style={rightIconStyle} />\n          </Button>\n        </CardActions>\n\n        <CardContent>\n          <Typography component=\"p\" color=\"textSecondary\" gutterBottom>\n            设置文字颜色\n          </Typography>\n          <TwitterPicker\n            triangle=\"hide\"\n            width=\"280px\"\n            color={textColor}\n            colors={[\n              '#000',\n              '#f3f3f3',\n              '#f44336',\n              '#9c27b0',\n              '#673ab7',\n              '#3f51b5',\n              '#03a9f4',\n              '#009688',\n              '#ffc107',\n              '#cddc39',\n            ]}\n            onChangeComplete={this.handleColorChange}\n          />\n        </CardContent>\n\n        <CardContent>\n          <FormControlLabel\n            control={\n              <Switch color=\"primary\" checked={authorVisible} onChange={this.handleAuthorToggle} />\n            }\n            label=\"显示出处\"\n          />\n          <Collapse in={authorVisible}>\n            <TextField\n              label=\"出处\"\n              value={author}\n              placeholder=\"请输入出处\"\n              fullWidth\n              margin=\"normal\"\n              onChange={this.handleAuthorChange}\n            />\n          </Collapse>\n        </CardContent>\n        <CardActions>\n          <Button color=\"secondary\" variant=\"contained\" onClick={reset}>\n            RESET\n            <RestoreIcon style={rightIconStyle} />\n          </Button>\n        </CardActions>\n      </Card>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport { observer } from 'mobx-react';\nimport { observable } from 'mobx';\nimport { Theme } from '@material-ui/core/styles';\nimport SnackbarContent from '@material-ui/core/SnackbarContent';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\n\nimport styled, { ThemeContext } from '../theme';\nimport { ImageCard } from '../components/ImageCard';\nimport { DictumEdit } from '../components/DictumEdit';\n\nconst Container = styled.section`\n  display: grid;\n  grid-template-columns: repeat(2, minmax(300px, 1fr));\n  grid-gap: 24px;\n  align-items: start;\n  max-width: 1200px;\n  min-width: 300px;\n  margin: auto;\n  padding-top: 24px;\n\n  @media (max-width: 800px) {\n    grid-template-columns: none;\n  }\n`;\n\nconst Alert = styled(SnackbarContent)`\n  grid-column: 1 / span 2;\n  width: 100%;\n  max-width: 100%;\n  background-color: ${props => props.theme.palette.error.light};\n\n  @supports (display: grid) {\n    display: none;\n  }\n`;\n\n@observer\nexport class Home extends Component {\n  static contextType = ThemeContext;\n  context!: Theme;\n\n  @observable\n  isAlertVisible = true;\n\n  handleAlertClose = () => {\n    this.isAlertVisible = false;\n  };\n\n  render() {\n    return (\n      <Container>\n        {this.isAlertVisible && (\n          <Alert\n            message=\"Your browser seems to be out of date so that it lacks support of CSS Grid Layout.\"\n            theme={this.context}\n            action={[\n              <IconButton\n                key=\"close\"\n                aria-label=\"Close\"\n                color=\"inherit\"\n                onClick={this.handleAlertClose}\n              >\n                <CloseIcon />\n              </IconButton>,\n            ]}\n          />\n        )}\n        <ImageCard />\n        <DictumEdit />\n      </Container>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n\nimport DefaultLayout from '../layouts/Default';\nimport { Home } from './Home';\n\nexport class Root extends Component {\n  render() {\n    return (\n      <Router basename={process.env.REACT_APP_PUBLIC_URL}>\n        <Switch>\n          <DefaultLayout>\n            <Switch>\n              <Route exact component={Home} path=\"/\" />\n            </Switch>\n          </DefaultLayout>\n        </Switch>\n      </Router>\n    );\n  }\n}\n","import React, { Component, Fragment } from 'react';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { create, JSSOptions } from 'jss';\nimport { JssProvider } from 'react-jss';\nimport { createGenerateClassName, jssPreset, MuiThemeProvider } from '@material-ui/core/styles';\n\nimport { theme, ThemeContext } from './theme';\nimport { rootStore, StoreContext } from './stores';\nimport { Root } from './screens/Root';\n\n// const styleNode = document.createComment('jss-insertion-point');\n// document.head.insertBefore(styleNode, document.head.firstChild);\n\nconst generateClassName = createGenerateClassName();\nconst jss = create({\n  ...jssPreset(),\n  // We define a custom insertion point that JSS will look for injecting the styles in the DOM.\n  insertionPoint: document.getElementById('jss-insertion-point'),\n} as JSSOptions);\n\nexport class App extends Component {\n  render() {\n    return (\n      <StoreContext.Provider value={rootStore}>\n        <ThemeContext.Provider value={theme}>\n          <MuiThemeProvider theme={theme}>\n            <JssProvider jss={jss} generateClassName={generateClassName}>\n              <Fragment>\n                <Root />\n                <CssBaseline />\n              </Fragment>\n            </JssProvider>\n          </MuiThemeProvider>\n        </ThemeContext.Provider>\n      </StoreContext.Provider>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { App } from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}